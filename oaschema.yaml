openapi: '3.1.0'

info:
  title: 'voca API'
  description: 'Your API for Vocabulary App'

paths:

  /words:
    get:
      parameters:
        - name: perPage
          in: query
          required: false
          default: 30
        - name: page
          in: query
          required: false
          default: 1

      summary: 'Returns all words with pagination'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WordBaseSchema'

    post:
      tags:
        - manage
      summary: 'Add word to lib'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordBaseSchema'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  
  /words/{word}/:
    parameters:
      - $ref: '#/components/parameters/WordParam'
    get:
      summary: 'Returns the word with all translations in russian'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WordBaseSchema'

    post:
      summary: 'Adds translation'
      tags:
        - manage
    patch:
      tags:
        - manage
      summary: 'Partial update for the word. Change word or transcription'

  /words/{word}/{translationId}:
    parameters:
      - name: translationId
        in: path
        required: false
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - manage
      summary: 'Deletes translation'

  /words/{word}/text:
    post:
      tags:
        - manage
      summary: 'Adds text example of usage'

  /words/{word}/{textUsageId}:
    put:
      tags:
        - manage
      summary: 'Updates text example of usage'
    delete:
      tags:
        - manage
      summary: 'Deletes text example of usage'

  /words/{word}/image:
    post:
      tags:
        - manage
      summary: 'Adds example of usage as image'

  /words/{word}/{imgUsageId}:
    # put:
    #   tags:
    #     - manage
    #   summary: 'Updates example of usage as image'
    delete:
      tags:
        - manage
      summary: 'Deletes example of usage as image'
    

# parameters: cookie -> JWT -> user_id -> DB_words_by_user_id
  /vocabulary:
    get:
      parameters:
        - name: status
          in: query
          required: false
          default: 'new'
      summary: 'returns All words [for specific user]'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WordBaseSchema'

  /vocabulary/{word}/{lang}:
    parameters:
      - name: word
        in: path
        required: true
        schema:
          type: string
      # - name: user_id
      #   in: path
      #   required: true
      #   schema:
      #     type: string
      #     format: uuid
      - name: lang
        in: path
        required: true
        schema:
          type: string
          enum:
            - ru
    post:
      tags:
        - user's action
      summary: 'Adds the word to vocabulary'
    patch:
      tags:
        - user's action
      summary: 'Updates the word''s status'
    delete:
      tags:
        - user's action
      summary: 'Deletes the word from vocabulary'


components:
  schemas:
    WordBaseSchema:
      type: object
      properties:
        name:
          type: string
        translation_ru:
          type: array
          items:
            type: object
            properties:
              partOfSpeech:
                $ref: '#/components/schemas/partOfSpeech'
              translation:
                type: string
    WordCreateSchema:
      $ref: '#/components/schemas/WordBaseSchema'
      required:
        - name
        - translation_ru
    WordGetSchema:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              
    partOfSpeech:
      type: string
      enum:
        - verb
        - prep
        - noun
        - adj
        - pronoun
        - adverb
        - conjuction
        - interjection
  parameters:
    WordParam:
        name: word
        in: path
        required: true
        schema:
          type: string

servers:

security:
